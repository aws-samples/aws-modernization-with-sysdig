<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Build on AWS Modernization Workshop Sample Docs</title>
    <link>https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/</link>
    <description>Recent content in Build on AWS Modernization Workshop Sample Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setup Environment</title>
      <link>https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/1_setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/1_setup/</guid>
      <description>Building a workshop leverages several tools:
 Git Hugo Hugo learn theme CloudFormation templates  1. Clone Sample Repo You will need to have a little familiarity with git, if not you might want to lookup a git tutorial.
Start by cloning the base repo and push it to a repo on your own GitHub account. Change the name of myCompany-Workshop :)
git clone https://github.com/aws-samples/aws-modernization-workshop-base myCompany-Workshop  We use clone instead of fork as you will break this from the sample repo and change the name.</description>
    </item>
    
    <item>
      <title>Edit and Build</title>
      <link>https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/10_editing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/10_editing/</guid>
      <description>Directory Tree Directory of artifacts you will add, change, delete during the course of building a workshop.
/ |-content |---_index.md |-static |---images |config.toml  Editing Hugo uses markdown to generate static html pages. This makes it easier to create a web based workshop as all you need to do is create documents using markdown and Hugo will create the pretty html for you. For additional information on markdown, visit the learn theme documentation page https://learn.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/20_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/20_testing/</guid>
      <description>Testing Once you feel your workshop is complete, have a few other people test it. At this point you will probably need technical people to test it as the flow may be a little rough. hugo with no options will generate an html site in /public. But it&amp;rsquo;s also fairly easy to run hugo server and connect to localhost:1313 to view the workshop.
Once you have ironed out flow issues, have a few non-technical check the site for grammatical errors.</description>
    </item>
    
    <item>
      <title>Publish</title>
      <link>https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/30_publish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/30_publish/</guid>
      <description>Cleanup  Remove the directory docs, hugo-docs-content, samples, and public.
 Cleanup any unused artifacts, be sure to look in static/images  Publish Now that your workshop is ready, reach out to your PSA or SA and have them follow the process for getting your workshop published.
High level steps  The SA will review your submission and makes sure everything works.
 The SA will request a repo under aws-samples with the naming standard aws-modernization-workshop-with-{companyname} Once the repo is created, you will fork this repo, copy the content of your workshop to this repo, then issue a pull request.</description>
    </item>
    
  </channel>
</rss>