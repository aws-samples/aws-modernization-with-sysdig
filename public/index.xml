<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Main Page on Secure DevOps with AWS &amp; Sysdig</title>
    <link>/</link>
    <description>Recent content in Main Page on Secure DevOps with AWS &amp; Sysdig</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Image Scanning Overview</title>
      <link>/00_introduction/03_image_scanning.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00_introduction/03_image_scanning.html</guid>
      <description>Sysdig Secure provides a comprehensive suite of tools to enhance and compliance across your application&amp;rsquo;s ecosystem. One critical part of this is scanning the images in your registry.
Sysdig’s ImageVision technology identifies vulnerabilities and misconfigurations by automating scanning within CI/CD pipelines and registries, as well as implementing registry scanning inline. It also blocks vulnerabilities pre-production, monitors for new CVEs at runtime, and helps you map a critical vulnerability back to an application and dev team.</description>
    </item>
    
    <item>
      <title>Image Scanning Technical Description</title>
      <link>/00_introduction/04_inline_scanning.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00_introduction/04_inline_scanning.html</guid>
      <description>There are two general approaches to scanning images in Sysdig - backend scanning or inline scanning. The reasons why you might choose one over the other is best explained by an understanding of how scanning works under the hood.
-- With Sysdig, there are two phases in scanning an image
 Analysis of contents Evaluation against policies and vulnerabilities  Phase 1 - Analysis of Contents During the analysis phase of the scan, the worker first loads the image.</description>
    </item>
    
    <item>
      <title>AWS Fargate and ECS Security</title>
      <link>/00_introduction/05_fargate_ecs_sec.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00_introduction/05_fargate_ecs_sec.html</guid>
      <description>Amazon Elastic Container Service (Amazon ECS) is a fully managed container orchestration service based on Kubernetes, allowing developers to run applications without the need to configure the required running environment. Amazon ECS is fully integrated with the Docker container registry AWS ECR.
AWS Fargate is a serverless compute engine for containers that removes the need to provision and manage servers. Fargate works alongside Amazon ECS (as well as Amazon EKS) to allocate the correct amount of compute resources for your application no matter the load, hence eliminating the need to choose instance types or scale cluster capacity.</description>
    </item>
    
    <item>
      <title>Infrastructure Runtime Security</title>
      <link>/00_introduction/06_infra_runtime_sec.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00_introduction/06_infra_runtime_sec.html</guid>
      <description>In the same way image scanning gives you visibility of vulnerabilities and threats pertaining specifically to an application&amp;rsquo;s containers, infrastructure scanning gives visibility of potential issues emanating from the environment on which these containers run.
AWS provides a rich environment upon which to base your application, but it&amp;rsquo;s not without its risks. There are many places where bad actors can create harm, for example exposing data by making S3 buckets public, deleting bucket encryption, disabling MFA for an account, adding/removing IAM policies.</description>
    </item>
    
    <item>
      <title>1. Sign-up for a Sysdig Trial account</title>
      <link>/10_prerequisites/12_sysdig.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10_prerequisites/12_sysdig.html</guid>
      <description>You need a Sysdig Secure account to complete this workshop. In particular you will need to make a note of your account&amp;rsquo;s associated API token &amp;amp; API Endpoint to configure the integrations.
 Sign-up for a free Sysdig trial here https://sysdig.com/company/free-trial/?utm_campaign=aws-workshop . Remember to select Sysdig Secure under the Trial Offer&amp;hellip; dropdown.
 You will receive a confirmation email with a confirmation link  Click the link and log into Sysdig, and make a note of the following two items (see animated GIF below for details on how to obtain these two values)</description>
    </item>
    
    <item>
      <title>2. Attending an AWS hosted event</title>
      <link>/10_prerequisites/14_aws_event_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10_prerequisites/14_aws_event_setup.html</guid>
      <description>To complete this workshop, you are provided with an AWS account via the AWS Event Engine service. A team hash will be provided to you by event staff.
If you are currently logged in to an AWS Account, you can logout using this link
 Create AWS Account 1 . Connect to the portal by clicking the button or browsing to https://dashboard.eventengine.run/. The following screen shows up. Enter the provided hash in the text box.</description>
    </item>
    
    <item>
      <title>3. Running the workshop on your own</title>
      <link>/10_prerequisites/16_aws_setup_your_own.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10_prerequisites/16_aws_setup_your_own.html</guid>
      <description>Only complete this section if you are running the workshop on your own. If you are at an AWS hosted event (such as re:Invent, Kubecon, Immersion Day, etc), go to Start the workshop at an AWS event.
  Your account must have the ability to create new IAM roles and scope other IAM permissions.
 You are responsible for the cost of the AWS services used while running this workshop in your AWS account.</description>
    </item>
    
    <item>
      <title>4.1 Create a Workspace</title>
      <link>/10_prerequisites/18_start_cloud9workspace.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10_prerequisites/18_start_cloud9workspace.html</guid>
      <description>AWS Cloud9 is a cloud-based integrated development environment (IDE) that Let’s you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes prepackaged with essential tools for popular programming languages, including JavaScript, Python, PHP, and more, so you don’t need to install files or configure your laptop for this workshop.
We will use Amazon Cloud9 to access our AWS account via the AWS CLI in this Workshop.</description>
    </item>
    
    <item>
      <title>4.2 Create IAM role</title>
      <link>/10_prerequisites/20_create_iam_role.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10_prerequisites/20_create_iam_role.html</guid>
      <description>Create an IAM role for your workspace Starting from here, when you see command to be entered such as below, you will enter these commands into Cloud9 IDE. You can use the Copy to clipboard feature (right hand upper corner) to simply copy and paste into Cloud9. In order to paste, you can use Ctrl + V for Windows or Command + V for Mac.
  Follow this deep link to create an IAM role with Administrator access.</description>
    </item>
    
    <item>
      <title>4.3 Attach IAM Role</title>
      <link>/10_prerequisites/22_attach_iam_role.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10_prerequisites/22_attach_iam_role.html</guid>
      <description> Attach the IAM role to your Workspace  Follow this deep link to find your Cloud9 EC2 instance
 Select the instance, then choose Actions / Security / Modify IAM role
 Choose Sysdig-Workshop-Admin from the IAM Role drop down, and select Save
  </description>
    </item>
    
    <item>
      <title>4.4 Configure workshop specific requirements</title>
      <link>/10_prerequisites/24_config_workshop_req.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10_prerequisites/24_config_workshop_req.html</guid>
      <description>Configure workspace for Sysdig Workshop Cloud9 normally manages IAM credentials dynamically. This isn&amp;rsquo;t currently compatible with the EKS IAM authentication, so we will disable it and rely on the IAM role instead.
  Return to your workspace and click the gear icon (in top right corner), or click to open a new tab and choose &amp;ldquo;Open Preferences&amp;rdquo;
 Select AWS SETTINGS and turn off AWS managed temporary credentials</description>
    </item>
    
    <item>
      <title>Setup Amazon ECR Registry</title>
      <link>/30_module_1/30_setup_ecr.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/30_module_1/30_setup_ecr.html</guid>
      <description>For the purposes of this lab you need to create an Amazon ECR registry. To do this, follow the steps below
 Log into your Cloud9 Workspace
 Run the following command to create a repository. The name is arbitrary, but for continuity in the lab please use aws-workshop
aws ecr create-repository --repository-name aws-workshop --image-scanning-configuration scanOnPush=true The output will be as follows
{ &amp;#34;repository&amp;#34;: { &amp;#34;repositoryArn&amp;#34;: &amp;#34;arn:aws:ecr:us-east-1:845151661675:repository/aws-workshop&amp;#34;, &amp;#34;registryId&amp;#34;: &amp;#34;845151661675&amp;#34;, &amp;#34;repositoryName&amp;#34;: &amp;#34;aws-workshop&amp;#34;, &amp;#34;repositoryUri&amp;#34;: &amp;#34;845151661675.</description>
    </item>
    
    <item>
      <title>Deploy the Amazon ECR Integration</title>
      <link>/30_module_1/31_deploy_ecr_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/30_module_1/31_deploy_ecr_integration.html</guid>
      <description>This integration enables the Amazon Elastic Container Registry (ECR) to automatically trigger an action to scan every new container that is pushed into the registry.
 Log into your AWS Console and select &amp;lsquo;US East (N. Virginia) us-east-1&amp;rsquo; from the &amp;lsquo;Select a Region&amp;rsquo; dropdown on the top right.
For the purposes of this exercise we will be using AWS Region us-east-1
 Navigate to this CloudFormation template.  Click Next.  There are three items to update on this screen:</description>
    </item>
    
    <item>
      <title>Push and Scan an Image from the Registry</title>
      <link>/30_module_1/32_image_from_registry.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/30_module_1/32_image_from_registry.html</guid>
      <description>Download Example Dockerfile and Sources Now that our automated scanner is in place, we can test it by pushing a Docker container, and check if it scans.
To illustrate the images scanning we will build an example Node.JS application based on the official “hello world” example described in their website.
 Go to your Cloud9 Workspace and download and uncompress example container files
wget https://github.com/sysdiglabs/hello-world-node-vulnerable/releases/download/v1.0/hello-world-node-vulnerable.zip unzip hello-world-node-vulnerable.zip cd hello-world-node-vulnerable/ And build and push the image to ECR</description>
    </item>
    
    <item>
      <title>Modify the image and trigger a second scan</title>
      <link>/30_module_1/33_image_rescan.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/30_module_1/33_image_rescan.html</guid>
      <description>For illustration purposes, let&amp;rsquo;s rebuild our image and make it more secure by starting with a different Base image.
 Go back into Cloud9 Workspace
 As a bit of housekeeping, first lets delete the older node image as follows to free up space on our Cloud9 workspace,
docker rmi $IMAGE Edit the Dockerfile and in the first line update the base image from
FROM node:12 to
FROM bitnami/node:12 The file should look like this</description>
    </item>
    
    <item>
      <title>Module Review</title>
      <link>/30_module_1/34_review.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/30_module_1/34_review.html</guid>
      <description>In this module we saw how to use Sysdig&amp;rsquo;s AWS ECR integration to automatically scan images upon being added to Amazon ECR.
In particular we looked at how to deploy the Amazon ECR Integration using AWS CloudFormation template. Then we saw how to setup the Amazon ECR Registry and push images to the it and observe them being scanned.
Finally we looked at how to view the scan results on the Sysdig Secure dashboard.</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>/30_module_1/35_cleanup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/30_module_1/35_cleanup.html</guid>
      <description> Remove container image from Amazon ECR Registry
docker system prune --all Remove Docker Node.JS Dockerfile &amp;amp; Source
rm -rf /home/ec2-user/environment/hello-world-node-vulnerable rm -rf /home/ec2-user/environment/hello-world-node-vulnerable.zip  Remove Amazon ECR Registry
aws ecr delete-repository --repository-name aws-workshop --force Remove Amazon ECR Integration
aws cloudformation delete-stack --stack-name ECSImageScanning  </description>
    </item>
    
    <item>
      <title>Install Amazon ECS CLI</title>
      <link>/40_module_2/40_install_amazon_ecs_cli.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/40_module_2/40_install_amazon_ecs_cli.html</guid>
      <description>We will use the Amazon ECS CLI tool to deploy an example ECS cluster, so we&amp;rsquo;ll need to install it on our Cloud9 Workspace. To install Amazon ECS CLI, follow the steps below
 Log into your Cloud9 Workspace
 Download the Amazon ECS CLI binary and make it executable .
sudo curl -sLo /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest sudo chmod +x /usr/local/bin/ecs-cli Check installation
ecs-cli --version Now create a file named task-execution-assume-role.json for our IAM role as follows</description>
    </item>
    
    <item>
      <title>Deploy Sysdig Secure Automated Image Scanner for Fargate</title>
      <link>/40_module_2/41_deploy_image_scanner_for_fargate.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/40_module_2/41_deploy_image_scanner_for_fargate.html</guid>
      <description>To deploy the Sysdig image scanner for Fargate, we&amp;rsquo;ll again use Amazon CloudFormation. The procedure is identical to how we installed Amazon ECR Integration in the previous lab, so this time we&amp;rsquo;ll use the AWS CLI instead.
Note You can find instructions on using the CLI on the Sysdig Fargate scanning installation page
 Let&amp;rsquo;s set our CloudFormation template URL as an environment variable to simplify the actual aws command.</description>
    </item>
    
    <item>
      <title>Deploy an ECS cluster using Fargate</title>
      <link>/40_module_2/42_deploy_an_ecs_cluster.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/40_module_2/42_deploy_an_ecs_cluster.html</guid>
      <description>To illustrate automated scanning, we will now deploy a sample ECS cluster that scales using Fargate. For the purposes of the lab this will consist of this sample PHP appliction running in a Docker Compose environment - https://hub.docker.com/r/amazon/amazon-ecs-sample.
 Create a cluster configuration and create a cluster
ecs-cli configure --cluster tutorial --default-launch-type FARGATE --config-name tutorial --region us-east-1 ecs-cli up --cluster-config tutorial --ecs-profile tutorial-profile The output should show a VPC and two Subnets have been created:-</description>
    </item>
    
    <item>
      <title>Initiate CodeBuild Pipelines Build and Scan</title>
      <link>/40_module_2/43_initiate_scan.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/40_module_2/43_initiate_scan.html</guid>
      <description>Now that a sample image has been deployed, the scanner should pick this up and scan it automatically
 Now go to CodeBuild &amp;gt; Build projects and see the task progress.
 Click on &amp;lsquo;Failed&amp;rsquo; next to ECSInlineSecureScanning to drill down on it.
 Click &amp;lsquo;Failed&amp;rsquo; link and scroll down to see the scan details
  </description>
    </item>
    
    <item>
      <title>View Results on Sysdig Secure Dashboard</title>
      <link>/40_module_2/44_sysdig_secure_dashboard.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/40_module_2/44_sysdig_secure_dashboard.html</guid>
      <description>The beauty of the Amazon ECS Fargate with Sysdig is that you have a centralised location to report on your scanning results.
 Log into Sysdig Secure, and Browse to &amp;lsquo;Image Scanning &amp;gt; Scan Results&amp;rsquo;.
 You can drill into amazon/amazon-ecs-sample to see details results of the scan
  </description>
    </item>
    
    <item>
      <title>Module Review</title>
      <link>/40_module_2/45_review.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/40_module_2/45_review.html</guid>
      <description>In this module we saw how to use Sysdig&amp;rsquo;s AWS ECS/Fargate integration to automatically scan deployed images.
We first deployed Sysdig&amp;rsquo;s AWS ECS/Fargate integration using a CloudFormation template.
In particular we looked at how to deploy the Amazon ECR Integration. Then we deployed an ECS cluster using Fargate and watched as CodeBuild pipelines are automatically created to scan the images.
Finally we saw how to view the scan results on the Sysdig Secure dashboard.</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>/40_module_2/46_cleanup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/40_module_2/46_cleanup.html</guid>
      <description>Remove ecsTaskExecutionRole
aws iam detach-role-policy --role-name ecsTaskExecutionRole --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy --region us-east-1 aws iam --region us-east-1 delete-role --role-name ecsTaskExecutionRole Remove ECS Cluster
stack=tutorial services=&amp;#34;$(aws ecs list-services --cluster &amp;#34;$stack&amp;#34; | grep &amp;#34;$stack&amp;#34; | sed -e &amp;#39;s/&amp;#34;//g&amp;#39; -e &amp;#39;s/,//&amp;#39;)&amp;#34; for service in $services; do aws ecs update-service --cluster &amp;#34;$stack&amp;#34; --service &amp;#34;$service&amp;#34; --desired-count 0 aws ecs delete-service --cluster &amp;#34;$stack&amp;#34; --service &amp;#34;$service&amp;#34; done for id in $(aws ecs list-container-instances --cluster &amp;#34;$stack&amp;#34; | grep container-instance | sed -e &amp;#39;s/&amp;#34;//g&amp;#39; -e &amp;#39;s/,//&amp;#39;); do aws ecs deregister-container-instance --cluster &amp;#34;$stack&amp;#34; --container-instance &amp;#34;$id&amp;#34; --force done for service in $services; do aws ecs wait services-inactive --cluster &amp;#34;$stack&amp;#34; --services &amp;#34;$service&amp;#34; done aws ecs delete-cluster --cluster &amp;#34;$stack&amp;#34; aws cloudformation delete-stack --stack-name &amp;#34;$stack&amp;#34; Delete log group created with ecs-cli compose</description>
    </item>
    
    <item>
      <title>Prework</title>
      <link>/50_module_3/50_prework.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/50_module_3/50_prework.html</guid>
      <description>Module 3 Prework: Setup CloudTrail Runtime Security We will be looking at CloudTrail runtime security in module 3 of this workshop. However, the CloudFormation template required can take up to ten minutes to deploy. So, we will start the deployment now, and it should be complete later when we need it.
There are two steps required to enable CloudTrail runtime security:
 Firstly, you must enable AWS Security Hub in the account, then Deploy the Sysdig CloudConnector CloudFormation template.</description>
    </item>
    
    <item>
      <title>Installing the CloudConnector</title>
      <link>/50_module_3/51_enable_aws_security_hub.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/50_module_3/51_enable_aws_security_hub.html</guid>
      <description>If you prefer learning by watching over reading, you can find an animated image at the bottom with all the steps listed below.
 Step 1. Enable AWS Security Hub To enable AWS Security Hub:
 Log into your Cloud9 Workspace
 Run the following command (no output will be generated)
aws securityhub enable-security-hub --enable-default-standards Log into your AWS account with your browser and then browse to the AWS Security Hub.</description>
    </item>
    
    <item>
      <title>Setup CloudTrail Runtime Security</title>
      <link>/50_module_3/51_setup_cloudtrail_runtime_security.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/50_module_3/51_setup_cloudtrail_runtime_security.html</guid>
      <description>If you followed the prework instructions and the start of this module, then you should have deployed the CloudTrail CloudFormation Template earlier. If you didn&amp;rsquo;t, then go back and complete this step now Setup CloudTrail Runtime Security, however please note that this can take up to ten minutes to complete.
To check it has been deployed successfully, navigate to https://console.aws.amazon.com/cloudformation/ and search for CloudConnector. You should see it&amp;rsquo;s status is CREATE_COMPLETE.</description>
    </item>
    
    <item>
      <title>Detecting Runtime Cloud Security Threats</title>
      <link>/50_module_3/52_detecting_runtime_cloud_security_threats.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/50_module_3/52_detecting_runtime_cloud_security_threats.html</guid>
      <description>Let&amp;rsquo;s look at an example of AWS threat detection in action with CloudTrail and the Sysdig CloudConnector. To do so we&amp;rsquo;ll create an S3 bucket, and make it public
 Log into Cloud9 Workspace
S3 bucket names are globally unique, so use your initials in lower case combined with a timestamp
 First set your initials as an environment variable
INITIALS=&amp;lt;your initials&amp;gt; Now create the S3 bucket, ensuring the bucket name is in lowercase.</description>
    </item>
    
    <item>
      <title>Checking Security Findings in AWS Security Hub</title>
      <link>/50_module_3/53_checking_security_findings_in_the_aws_security_hub.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/50_module_3/53_checking_security_findings_in_the_aws_security_hub.html</guid>
      <description>You can check these events without leaving the AWS console. This is how findings reported by Sysdig CloudConnector look in the AWS Security Hub:
 Browse to Security Hub and click &amp;lsquo;Findings&amp;rsquo; on the left.   Click on &amp;ldquo;Delete bucket encryption&amp;rdquo; to view all the information you need to take immediate action:   And they appear in JSON format in AWS CloudWatch log streams.
Browse to CloudWatch, and click &amp;lsquo;Log groups &amp;gt; cloud-connector &amp;gt; alerts&amp;rsquo;</description>
    </item>
    
    <item>
      <title>Modifying a Falco Rule for CloudTrail</title>
      <link>/50_module_3/54_modifying_a_falco_rule_for_cloudtrail.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/50_module_3/54_modifying_a_falco_rule_for_cloudtrail.html</guid>
      <description>Using Sysdig CloudConnector, you are not limited to the out-of-the-box rules provided. You can modify existing rules, or write your own tailored to your own needs.
Let’s try first modifying a rule. The following rule checks if a resource is created in a region that you are not usually using. However, to be active you must specify which regions you want to detect.
- list: disallowed_aws_regions items: [] - rule: AWS command executed on unused region desc: Detect AWS command execution on unused regions condition: &amp;gt; not jevt.</description>
    </item>
    
    <item>
      <title>Module Review</title>
      <link>/50_module_3/55_review.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/50_module_3/55_review.html</guid>
      <description>In this module we looked at how to audit AWS CloudTrail events with Sysdig CloudConnector. The Sysdig CloudConnector analyzes every CloudTrail entry in real time, and provides runtime protection using a flexible set of Falco rules, and can forward findings to AWS Security Hub, AWS CloudWatch, as well as to Sysdig Secure.</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>/50_module_3/56_cleanup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/50_module_3/56_cleanup.html</guid>
      <description> Delete the log group created to test the Falco rule modification
aws logs delete-log-group --log-group-name &amp;#34;test_unused_region&amp;#34; --region=&amp;#34;us-west-2&amp;#34; Delete an S3 bucket
aws s3api delete-bucket --bucket $BUCKETNAME Remove CloudConnector Integration
aws cloudformation delete-stack --stack-name CloudConnector  </description>
    </item>
    
  </channel>
</rss>